/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExternToken, SwapAmountInRoute, ExecuteMsg, DepositToken, Phase, PhaseStep, Uint128, UpdateConfigMsg, StakeMsg, UnstakeMsg, ExecuteSuperfluidDelegateMsg, ExecuteEpochMsg, QueryMsg, ChannelResponse, ChannelInfo, IbcEndpoint, Addr, Config, Decimal, FeeInfo, ListChannelsResponse, State, ArrayOfUnbonding, Unbonding } from "./StrategyOsmosis.types";
export interface StrategyOsmosisReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  state: () => Promise<State>;
  bonded: ({
    addr
  }: {
    addr: string;
  }) => Promise<Uint128>;
  unbonding: ({
    addr
  }: {
    addr: string;
  }) => Promise<Uint128>;
  fee: () => Promise<FeeInfo>;
  listChannels: () => Promise<ListChannelsResponse>;
  channel: ({
    id
  }: {
    id: string;
  }) => Promise<ChannelResponse>;
  unbondings: () => Promise<ArrayOfUnbonding>;
}
export class StrategyOsmosisQueryClient implements StrategyOsmosisReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
    this.bonded = this.bonded.bind(this);
    this.unbonding = this.unbonding.bind(this);
    this.fee = this.fee.bind(this);
    this.listChannels = this.listChannels.bind(this);
    this.channel = this.channel.bind(this);
    this.unbondings = this.unbondings.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<State> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
  bonded = async ({
    addr
  }: {
    addr: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      bonded: {
        addr
      }
    });
  };
  unbonding = async ({
    addr
  }: {
    addr: string;
  }): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unbonding: {
        addr
      }
    });
  };
  fee = async (): Promise<FeeInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fee: {}
    });
  };
  listChannels = async (): Promise<ListChannelsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_channels: {}
    });
  };
  channel = async ({
    id
  }: {
    id: string;
  }): Promise<ChannelResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel: {
        id
      }
    });
  };
  unbondings = async (): Promise<ArrayOfUnbonding> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unbondings: {}
    });
  };
}
export interface StrategyOsmosisInterface extends StrategyOsmosisReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    automateSuperfluid,
    baseDenom,
    chainId,
    controllerDepositDenom,
    controllerTransferChannelId,
    depositToken,
    externTokens,
    icaChannelId,
    lpDenom,
    owner,
    phase,
    phaseStep,
    poolId,
    quoteDenom,
    superfluidValidator,
    transferChannelId,
    transferTimeout,
    unbondPeriod
  }: {
    automateSuperfluid?: boolean;
    baseDenom?: string;
    chainId?: string;
    controllerDepositDenom?: string;
    controllerTransferChannelId?: string;
    depositToken?: DepositToken;
    externTokens?: ExternToken[];
    icaChannelId?: string;
    lpDenom?: string;
    owner?: string;
    phase?: Phase;
    phaseStep?: PhaseStep;
    poolId?: number;
    quoteDenom?: string;
    superfluidValidator?: string;
    transferChannelId?: string;
    transferTimeout?: number;
    unbondPeriod?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stake: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  superfluidDelegate: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  executeEpoch: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class StrategyOsmosisClient extends StrategyOsmosisQueryClient implements StrategyOsmosisInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.superfluidDelegate = this.superfluidDelegate.bind(this);
    this.executeEpoch = this.executeEpoch.bind(this);
  }

  updateConfig = async ({
    automateSuperfluid,
    baseDenom,
    chainId,
    controllerDepositDenom,
    controllerTransferChannelId,
    depositToken,
    externTokens,
    icaChannelId,
    lpDenom,
    owner,
    phase,
    phaseStep,
    poolId,
    quoteDenom,
    superfluidValidator,
    transferChannelId,
    transferTimeout,
    unbondPeriod
  }: {
    automateSuperfluid?: boolean;
    baseDenom?: string;
    chainId?: string;
    controllerDepositDenom?: string;
    controllerTransferChannelId?: string;
    depositToken?: DepositToken;
    externTokens?: ExternToken[];
    icaChannelId?: string;
    lpDenom?: string;
    owner?: string;
    phase?: Phase;
    phaseStep?: PhaseStep;
    poolId?: number;
    quoteDenom?: string;
    superfluidValidator?: string;
    transferChannelId?: string;
    transferTimeout?: number;
    unbondPeriod?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        automate_superfluid: automateSuperfluid,
        base_denom: baseDenom,
        chain_id: chainId,
        controller_deposit_denom: controllerDepositDenom,
        controller_transfer_channel_id: controllerTransferChannelId,
        deposit_token: depositToken,
        extern_tokens: externTokens,
        ica_channel_id: icaChannelId,
        lp_denom: lpDenom,
        owner,
        phase,
        phase_step: phaseStep,
        pool_id: poolId,
        quote_denom: quoteDenom,
        superfluid_validator: superfluidValidator,
        transfer_channel_id: transferChannelId,
        transfer_timeout: transferTimeout,
        unbond_period: unbondPeriod
      }
    }, fee, memo, _funds);
  };
  stake = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake: {}
    }, fee, memo, _funds);
  };
  unstake = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        amount
      }
    }, fee, memo, _funds);
  };
  superfluidDelegate = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      superfluid_delegate: {}
    }, fee, memo, _funds);
  };
  executeEpoch = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_epoch: {}
    }, fee, memo, _funds);
  };
}