{
  "contract_name": "strategy-osmosis",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "automate_superfluid",
      "base_denom",
      "chain_id",
      "controller_deposit_denom",
      "controller_transfer_channel_id",
      "extern_tokens",
      "lp_denom",
      "pool_id",
      "quote_denom",
      "superfluid_validator",
      "transfer_channel_id",
      "transfer_timeout",
      "unbond_period"
    ],
    "properties": {
      "automate_superfluid": {
        "type": "boolean"
      },
      "base_denom": {
        "type": "string"
      },
      "chain_id": {
        "type": "string"
      },
      "controller_deposit_denom": {
        "type": "string"
      },
      "controller_transfer_channel_id": {
        "type": "string"
      },
      "extern_tokens": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ExternToken"
        }
      },
      "lp_denom": {
        "type": "string"
      },
      "pool_id": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "quote_denom": {
        "type": "string"
      },
      "superfluid_validator": {
        "type": "string"
      },
      "transfer_channel_id": {
        "type": "string"
      },
      "transfer_timeout": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "unbond_period": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "ExternToken": {
        "type": "object",
        "required": [
          "extern_token",
          "swap_in_route"
        ],
        "properties": {
          "extern_token": {
            "type": "string"
          },
          "swap_in_route": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwapAmountInRoute"
            }
          }
        },
        "additionalProperties": false
      },
      "SwapAmountInRoute": {
        "type": "object",
        "required": [
          "pool_id",
          "token_out_denom"
        ],
        "properties": {
          "pool_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "token_out_denom": {
            "type": "string"
          }
        }
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "$ref": "#/definitions/UpdateConfigMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "stake"
        ],
        "properties": {
          "stake": {
            "$ref": "#/definitions/StakeMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unstake"
        ],
        "properties": {
          "unstake": {
            "$ref": "#/definitions/UnstakeMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "superfluid_delegate"
        ],
        "properties": {
          "superfluid_delegate": {
            "$ref": "#/definitions/ExecuteSuperfluidDelegateMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "execute_epoch"
        ],
        "properties": {
          "execute_epoch": {
            "$ref": "#/definitions/ExecuteEpochMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "DepositToken": {
        "type": "string",
        "enum": [
          "base",
          "quote"
        ]
      },
      "ExecuteEpochMsg": {
        "type": "object",
        "additionalProperties": false
      },
      "ExecuteSuperfluidDelegateMsg": {
        "type": "object",
        "additionalProperties": false
      },
      "ExternToken": {
        "type": "object",
        "required": [
          "extern_token",
          "swap_in_route"
        ],
        "properties": {
          "extern_token": {
            "type": "string"
          },
          "swap_in_route": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwapAmountInRoute"
            }
          }
        },
        "additionalProperties": false
      },
      "Phase": {
        "type": "string",
        "enum": [
          "deposit",
          "withdraw"
        ]
      },
      "PhaseStep": {
        "type": "string",
        "enum": [
          "ibc_transfer_to_host",
          "ibc_transfer_to_host_callback",
          "request_icq_after_ibc_transfer_to_host",
          "response_icq_after_ibc_transfer_to_host",
          "sell_extern_tokens",
          "sell_extern_tokens_callback",
          "request_icq_after_sell_extern_tokens",
          "response_icq_after_sell_extern_tokens",
          "add_liquidity",
          "add_liquidity_callback",
          "bond_liquidity",
          "bond_liquidity_callback",
          "request_icq_after_bond_liquidity",
          "response_icq_after_bond_liquidity",
          "begin_unbonding_for_pending_requests",
          "begin_unbonding_for_pending_requests_callback",
          "check_matured_unbondings",
          "remove_liquidity",
          "remove_liquidity_callback",
          "request_icq_after_remove_liquidity",
          "response_icq_after_remove_liquidity",
          "swap_two_tokens_to_deposit_token",
          "swap_two_tokens_to_deposit_token_callback",
          "request_icq_after_swap_two_tokens_to_deposit_token",
          "response_icq_after_swap_two_tokens_to_deposit_token",
          "ibc_transfer_to_controller",
          "ibc_transfer_to_controller_callback",
          "request_icq_after_ibc_transfer_to_controller",
          "response_icq_after_ibc_transfer_to_controller",
          "distribute_to_unbonded_users"
        ]
      },
      "StakeMsg": {
        "type": "object",
        "additionalProperties": false
      },
      "SwapAmountInRoute": {
        "type": "object",
        "required": [
          "pool_id",
          "token_out_denom"
        ],
        "properties": {
          "pool_id": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "token_out_denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UnstakeMsg": {
        "type": "object",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "UpdateConfigMsg": {
        "type": "object",
        "properties": {
          "automate_superfluid": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "base_denom": {
            "type": [
              "string",
              "null"
            ]
          },
          "chain_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "controller_deposit_denom": {
            "type": [
              "string",
              "null"
            ]
          },
          "controller_transfer_channel_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "deposit_token": {
            "anyOf": [
              {
                "$ref": "#/definitions/DepositToken"
              },
              {
                "type": "null"
              }
            ]
          },
          "extern_tokens": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/ExternToken"
            }
          },
          "ica_channel_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "lp_denom": {
            "type": [
              "string",
              "null"
            ]
          },
          "owner": {
            "type": [
              "string",
              "null"
            ]
          },
          "phase": {
            "anyOf": [
              {
                "$ref": "#/definitions/Phase"
              },
              {
                "type": "null"
              }
            ]
          },
          "phase_step": {
            "anyOf": [
              {
                "$ref": "#/definitions/PhaseStep"
              },
              {
                "type": "null"
              }
            ]
          },
          "pool_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "quote_denom": {
            "type": [
              "string",
              "null"
            ]
          },
          "superfluid_validator": {
            "type": [
              "string",
              "null"
            ]
          },
          "transfer_channel_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "transfer_timeout": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "unbond_period": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "bonded"
        ],
        "properties": {
          "bonded": {
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unbonding"
        ],
        "properties": {
          "unbonding": {
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "fee"
        ],
        "properties": {
          "fee": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Show all channels connected to.",
        "type": "object",
        "required": [
          "list_channels"
        ],
        "properties": {
          "list_channels": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the details of the name channel, error if not created.",
        "type": "object",
        "required": [
          "channel"
        ],
        "properties": {
          "channel": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "unbondings"
        ],
        "properties": {
          "unbondings": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "bonded": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "channel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChannelResponse",
      "type": "object",
      "required": [
        "info"
      ],
      "properties": {
        "info": {
          "description": "Information on the channel's connection",
          "allOf": [
            {
              "$ref": "#/definitions/ChannelInfo"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChannelInfo": {
          "type": "object",
          "required": [
            "address",
            "connection_id",
            "counterparty_endpoint",
            "id"
          ],
          "properties": {
            "address": {
              "description": "interchain account address",
              "type": "string"
            },
            "connection_id": {
              "description": "the connection this exists on (you can use to query client/consensus info)",
              "type": "string"
            },
            "counterparty_endpoint": {
              "description": "the remote channel/port we connect to",
              "allOf": [
                {
                  "$ref": "#/definitions/IbcEndpoint"
                }
              ]
            },
            "id": {
              "description": "id of this channel",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "IbcEndpoint": {
          "type": "object",
          "required": [
            "channel_id",
            "port_id"
          ],
          "properties": {
            "channel_id": {
              "type": "string"
            },
            "port_id": {
              "type": "string"
            }
          }
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "automate_superfluid",
        "base_denom",
        "chain_id",
        "controller_deposit_denom",
        "controller_transfer_channel_id",
        "deposit_token",
        "extern_tokens",
        "ica_account",
        "ica_channel_id",
        "ica_connection_id",
        "lp_denom",
        "owner",
        "phase",
        "phase_step",
        "pool_id",
        "quote_denom",
        "superfluid_validator",
        "transfer_channel_id",
        "transfer_timeout",
        "unbond_period"
      ],
      "properties": {
        "automate_superfluid": {
          "type": "boolean"
        },
        "base_denom": {
          "type": "string"
        },
        "chain_id": {
          "type": "string"
        },
        "controller_deposit_denom": {
          "type": "string"
        },
        "controller_transfer_channel_id": {
          "type": "string"
        },
        "deposit_token": {
          "$ref": "#/definitions/DepositToken"
        },
        "extern_tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternToken"
          }
        },
        "ica_account": {
          "type": "string"
        },
        "ica_channel_id": {
          "type": "string"
        },
        "ica_connection_id": {
          "type": "string"
        },
        "lp_denom": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Addr"
        },
        "phase": {
          "$ref": "#/definitions/Phase"
        },
        "phase_step": {
          "$ref": "#/definitions/PhaseStep"
        },
        "pool_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "quote_denom": {
          "type": "string"
        },
        "superfluid_validator": {
          "type": "string"
        },
        "transfer_channel_id": {
          "type": "string"
        },
        "transfer_timeout": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "unbond_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "DepositToken": {
          "type": "string",
          "enum": [
            "base",
            "quote"
          ]
        },
        "ExternToken": {
          "type": "object",
          "required": [
            "extern_token",
            "swap_in_route"
          ],
          "properties": {
            "extern_token": {
              "type": "string"
            },
            "swap_in_route": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapAmountInRoute"
              }
            }
          },
          "additionalProperties": false
        },
        "Phase": {
          "type": "string",
          "enum": [
            "deposit",
            "withdraw"
          ]
        },
        "PhaseStep": {
          "type": "string",
          "enum": [
            "ibc_transfer_to_host",
            "ibc_transfer_to_host_callback",
            "request_icq_after_ibc_transfer_to_host",
            "response_icq_after_ibc_transfer_to_host",
            "sell_extern_tokens",
            "sell_extern_tokens_callback",
            "request_icq_after_sell_extern_tokens",
            "response_icq_after_sell_extern_tokens",
            "add_liquidity",
            "add_liquidity_callback",
            "bond_liquidity",
            "bond_liquidity_callback",
            "request_icq_after_bond_liquidity",
            "response_icq_after_bond_liquidity",
            "begin_unbonding_for_pending_requests",
            "begin_unbonding_for_pending_requests_callback",
            "check_matured_unbondings",
            "remove_liquidity",
            "remove_liquidity_callback",
            "request_icq_after_remove_liquidity",
            "response_icq_after_remove_liquidity",
            "swap_two_tokens_to_deposit_token",
            "swap_two_tokens_to_deposit_token_callback",
            "request_icq_after_swap_two_tokens_to_deposit_token",
            "response_icq_after_swap_two_tokens_to_deposit_token",
            "ibc_transfer_to_controller",
            "ibc_transfer_to_controller_callback",
            "request_icq_after_ibc_transfer_to_controller",
            "response_icq_after_ibc_transfer_to_controller",
            "distribute_to_unbonded_users"
          ]
        },
        "SwapAmountInRoute": {
          "type": "object",
          "required": [
            "pool_id",
            "token_out_denom"
          ],
          "properties": {
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "token_out_denom": {
              "type": "string"
            }
          }
        }
      }
    },
    "fee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FeeInfo",
      "type": "object",
      "required": [
        "deposit_fee_rate",
        "interest_fee_rate",
        "withdraw_fee_rate"
      ],
      "properties": {
        "deposit_fee_rate": {
          "$ref": "#/definitions/Decimal"
        },
        "interest_fee_rate": {
          "$ref": "#/definitions/Decimal"
        },
        "withdraw_fee_rate": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "list_channels": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListChannelsResponse",
      "type": "object",
      "required": [
        "channels"
      ],
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChannelInfo": {
          "type": "object",
          "required": [
            "address",
            "connection_id",
            "counterparty_endpoint",
            "id"
          ],
          "properties": {
            "address": {
              "description": "interchain account address",
              "type": "string"
            },
            "connection_id": {
              "description": "the connection this exists on (you can use to query client/consensus info)",
              "type": "string"
            },
            "counterparty_endpoint": {
              "description": "the remote channel/port we connect to",
              "allOf": [
                {
                  "$ref": "#/definitions/IbcEndpoint"
                }
              ]
            },
            "id": {
              "description": "id of this channel",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "IbcEndpoint": {
          "type": "object",
          "required": [
            "channel_id",
            "port_id"
          ],
          "properties": {
            "channel_id": {
              "type": "string"
            },
            "port_id": {
              "type": "string"
            }
          }
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "State",
      "type": "object",
      "required": [
        "bonded_lp_amount",
        "controller_free_amount",
        "controller_pending_transfer_amount",
        "controller_stacked_amount_to_deposit",
        "extern_token_amounts",
        "free_base_amount",
        "free_lp_amount",
        "free_quote_amount",
        "last_unbonding_id",
        "lock_id",
        "lp_redemption_rate",
        "pending_bond_lp_amount",
        "pending_icq",
        "pending_lp_removal_amount",
        "redemption_rate",
        "total_deposit",
        "total_shares",
        "total_withdrawn",
        "unbonding_lp_amount"
      ],
      "properties": {
        "bonded_lp_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "controller_free_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "controller_pending_transfer_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "controller_stacked_amount_to_deposit": {
          "$ref": "#/definitions/Uint128"
        },
        "extern_token_amounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "free_base_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "free_lp_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "free_quote_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "last_unbonding_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lock_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lp_redemption_rate": {
          "$ref": "#/definitions/Uint128"
        },
        "pending_bond_lp_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "pending_icq": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pending_lp_removal_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "redemption_rate": {
          "$ref": "#/definitions/Uint128"
        },
        "total_deposit": {
          "$ref": "#/definitions/Uint128"
        },
        "total_shares": {
          "$ref": "#/definitions/Uint128"
        },
        "total_withdrawn": {
          "$ref": "#/definitions/Uint128"
        },
        "unbonding_lp_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "unbonding": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "unbondings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Unbonding",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Unbonding"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Unbonding": {
          "type": "object",
          "required": [
            "amount",
            "id",
            "marked",
            "pending_start",
            "sender",
            "start_time"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "marked": {
              "type": "boolean"
            },
            "pending_start": {
              "type": "boolean"
            },
            "sender": {
              "$ref": "#/definitions/Addr"
            },
            "start_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
