{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "update_params"
      ],
      "properties": {
        "update_params": {
          "$ref": "#/definitions/UpdateParamsMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "$ref": "#/definitions/SwapMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "deposit_liquidity"
      ],
      "properties": {
        "deposit_liquidity": {
          "$ref": "#/definitions/DepositLiquidityMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_liquidity"
      ],
      "properties": {
        "withdraw_liquidity": {
          "$ref": "#/definitions/WithdrawLiquidityMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DepositLiquidityMsg": {
      "type": "object",
      "additionalProperties": false
    },
    "SwapMsg": {
      "type": "object",
      "required": [
        "output_denom"
      ],
      "properties": {
        "output_denom": {
          "type": "string"
        },
        "recipient": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateParamsMsg": {
      "type": "object",
      "properties": {
        "authority": {
          "type": [
            "string",
            "null"
          ]
        },
        "denoms_same_origin": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "fee_collector": {
          "type": [
            "string",
            "null"
          ]
        },
        "fee_rate": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "lp_fee_rate": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "WithdrawLiquidityMsg": {
      "type": "object",
      "required": [
        "output_denom",
        "share_amount"
      ],
      "properties": {
        "output_denom": {
          "type": "string"
        },
        "share_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    }
  }
}
